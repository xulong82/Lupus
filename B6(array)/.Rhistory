plot(sampleSD, posteriorSD)
abline(0, 1)
mean(sampleSD)
pvals = fit$p.value[,2]
length(pvals)
length(spike)
1 - sum(pvals < 0.01 & spike) / sum(spike)
sum(pvals < 0.01 & spike) / sum(pvals < 0.01)
library(limma)
fit = lmFit(y, design=model.matrix(~ g))
fit = eBayes(fit)
##second coefficient relates to diffences between group
pvals = fit$p.value[,2]
1 - sum(pvals < 0.01 & spike) / sum(spike)
pvals
pvals < 0.01
table(pvals < 0.01)
names(fit)
head(fit$p.value)
pvals = fit$p.value[, 2]
table(pvals < 0.01)
table(spikes)
table(spike)
rowttest(y)
rowttests(y)
y = rowttests(y)
head(y)
table(y[, 3] < 0.01)
y = rowttests(y, g)
g
y <- exprs(rma95)
z = rowttests(y, g)
table(z[, 3] < 0.01)
pvals
all(rownames(pvals) == names(spike))
sum((! pvals < 0.01) & spike)/ sum(pvals < 0.01)
sum((pvals < 0.01) & (! spike))/ sum(pvals < 0.01)
5.3 * 52
?pt
?qr
head(y)
y1 = y[1, ]
y1
g
lm(y1 ~ g)
summary(lm(y1 ~ g))
g
-0.0744 / 0.10605
?mrlm
?rlm
library(MASS)
?rlm
head(y)
rowVars(y)
vars = rowVars(y)
hist(vars)
hist(sqrt(vars))
?seq
seq(0, 1, by = 0.01)
p = seq(0, 1, by = 0.01)
6 * p * (1 - p)
sum(6 * p * (1 - p))
pi = 6 * p * (1 - p)
plot(p, pi)
mean(pi)
head(y)
dim(y)
x = rowVars(y[, 1:3])
x
n = length(x)
n
?pmax
pmax(x)
min(5:1)
pmin(5:1)
pmin(5:1, pi)
pmax(x, 0)
k = rnorm(10)
k
pmax(k, 0)
log(x)
digamma(11/2)
?digamma
log(11/2)
z <- log(x)
e <- z-digamma(df1/2)+log(df1/2)
df1 = 11
e <- z-digamma(df1/2)+log(df1/2)
emean <- mean(e)
evar <- sum((e-emean)^2)/(n-1)
evar <- evar - mean(trigamma(df1/2))
evar
df2 <- 2*trigammaInverse(evar)
s20 <- exp(emean+digamma(df2/2)-log(df2/2))
df2
s20
fitFDist(x, 11)
?sampling
library(rstan)
?sampling
log10
install.packages("ExomeDepth")
library(ExomeDepth)
data(exons.hg19)
head(exons.hg19)
data(ExomeCount)
ExomeCount
colnames(ExomeCount)
ExomeCount.dafr <- as(ExomeCount[, colnames(ExomeCount)], "data.frame")
head(ExomeCount.dafr)
ExomeCount.dafr$chromosome <- gsub(as.character(ExomeCount.dafr$space), "chr", "")
ExomeCount.dafr$chromosome <- gsub(as.character(ExomeCount.dafr$space), pattern = "chr", replacement = "")
head(ExomeCount.dafr)
99e-2
library(TxDb.Hsapiens.UCSC.hg19.knownGene)
library(GenomicFeatures)
library(org.Hs.eg.db)
library(tidyr)
library(reshape)
library(dplyr)
f = p * (1-p)
f = 1 / p * (1-p)
f = 1 / p / (1-p)
x = seq(0, 1, 0.01)
x
y = log(x / (1-x))
plot(x, y)
plot(y, x)
plot(y, x, type = "l")
?prod
prod(1, 2, 3)
require(grDevices) # for colours
data(volcano)
str(volcano)
head(volcano)
x <- 10*1:nrow(volcano)
y <- 10*1:ncol(volcano)
x
y
?filled.contour
filled.coutour(x, y, )
filled.coutour(x, y, z)
filled.contour(x, y, z)
filled.contour(x, y, volcano)
post <- function (a,b,y,n,x) prod((invlogit(a+b*x))^y*(1-invlogit(a+b*x))^(n-y))
x = c(-0.86, -0.30, -0.05, 0.73)
n = c(5, 5, 5, 5)
y = c(0, 1, 3, 5)
a = 0.5
b = 1
sapply(1:4, function(i) post(a, b, y[i], n[i], x[i]))
??invlogit
library(gtools)
post <- function (a,b,y,n,x) prod((invlogit(a+b*x))^y*(1-invlogit(a+b*x))^(n-y))
sapply(1:4, function(i) post(a, b, y[i], n[i], x[i]))
?invlogit
library(arm)
sapply(1:4, function(i) post(a, b, y[i], n[i], x[i]))
post(a, b, y, n, x)
(invlogit(a+b*x))^y*(1-invlogit(a+b*x))^(n-y)
for (a in seq(-5, 10, 0.1)) {
for (b in seq(-10, 40, 0.1)) {
post(a, b, y, n, x)
}
}
seq(-5, 10, 0.1)
z = NULL
for (a in seq(-5, 10, 0.1)) {
for (b in seq(-10, 40, 0.1)) {
z = c(z, post(a, b, y, n, x))
}
}
head(z)
150 * 500
151 * 501
z = matrix(z, ncol = 501)
a = seq(-5, 10, 0.1)
b = seq(-10, 40, 0.1)
filled.contour(a, b, z)
sum(z)
max(z)
x = c(-0.86, -0.30, -0.05, 0.73)
n = c(5, 5, 5, 5)
y = c(0, 1, 3, 5)
a0 = seq(-5, 10, 0.1)
b0 = seq(-10, 40, 0.1)
post <- function (a,b,y,n,x) prod((invlogit(a+b*x))^y*(1-invlogit(a+b*x))^(n-y))
triangle.prior <- function(x) {
if (x >= 0 && x < 0.25)
8 * x
else if (x >= 0.25 && x <= 1)
8/3 - 8 * x/3
else 0
}
plot(seq(-1, 1, 0.01), triangle.prior(seq(-1, 1, 0.01)))
seq(-1, 1, 0.01)
triangle.prior(seq(-1, 1, 0.01))
y = sapply(x, triangle.prior)
x
y
x = seq(-1, 1, 0.01)
y = sapply(x, triangle.prior)
x
y
plot(x, y)
x = seq(-1, 2, 0.01)
y = sapply(x, triangle.prior)
plot(x, y)
posterior.function <- function(theta, n, y) {
(theta^y) * (1 - theta)^(n - y) * triangle.prior(theta)
}
m <- 100
grid.points <- seq(from = 0, to = 1, length.out = m)
grid.point
grid.points
unnormal.post.ord <- posterior.function(theta = grid.points, n = 500, y = 285)
unnormal.post.ord
k <- 1/m
normal.constant <- sum(k * unnormal.post.ord)
normal.constant
post.ord <- unnormal.post.ord/normal.constant
post.ord
plot(grid.points, post.ord)
plot(grid.points, post.ord, type = "l", col = "red")
?sample
posterior.triangle.1 <- sample(grid.points, size = 10000, replace = T, prob = post.ord)
hist(posterior.triangle.1)
hist(posterior.triangle.1, xlim = c(0, 1))
hist(posterior.triangle.1, xlim = c(0, 1))
posterior.triangle.1
poisson.posterior <- function(theta, y, x, prior.mean.a, prior.var.a, prior.mean.b, prior.var.b) {
a <- theta[1]
b <- theta[2]
lambda <- exp(a + b * x)
log.like <- sum(dpois(y, lambda = lambda, log = T))
log.prior.a <- dnorm(a, mean = prior.mean.a, sd = sqrt(prior.var.a), log = T)
log.prior.b <- dnorm(b, mean = prior.mean.b, sd = sqrt(prior.var.b), log = T)
log.post <- log.like + log.prior.a + log.prior.b
return(exp(log.post))
}
library(Zelig)
install.packages("Zelig")
library(Zelig)
data(sanction)
sanction
head(sanction)
plot(sanction$coop, sanction$num)
y.vec <- sanction$num
x.vec <- sanction$coop
y.vec
x.vec
mu.a <- mu.b <- 0
sigma2.a <- sigma2.b <- 20
mle <- glm(num ~ coop, data = sanction, family = poisson)$coef
mle
?glm
mle.se <- summary(glm(num ~ coop, data = sanction, family = poisson))$coef[, 2]
mle.se
grid.a <- seq(from = mle[1] - 5 * mle.se[1], to = mle[1] + 5 * mle.se[1], length.out = 200)
grid.b <- seq(from = mle[2] - 5 * mle.se[2], to = mle[2] + 5 * mle.se[2], length.out = 200)
grid.a
grid.b
grid.points <- expand.grid(grid.a, grid.b)
head(grid.points)
head(grid.a)
head(grid.b)
post.ord <- apply(grid.points, MARGIN = 1, FUN = poisson.posterior,
y = y.vec, x = x.vec, prior.mean.a = mu.a, prior.var.a = sigma2.a,
prior.mean.b = mu.b, prior.var.b = sigma2.b)
str(post.ord)
sample.indices <- sample(1:nrow(grid.points), size = 10000, replace = T, prob = post.ord)
sim.posterior <- grid.points[sample.indices, ]
dim(sim.posterior)
log_post <- function (a,b,y,n,x) sum (dbinom (y, n, invlogit(a+b*x), log.p=TRUE))
x = c(-0.86, -0.30, -0.05, 0.73)
n = c(5, 5, 5, 5)
y = c(0, 1, 3, 5)
a0 = seq(-5, 10, 0.1)
b0 = seq(-10, 40, 0.1)
a = a0[1]
b = b0[1]
dbinom (y, n, invlogit(a+b*x), log.p=TRUE)
invlogit(a+b*x)
?dbinom
sum(invlogit(a+b*x))
dbinom(y, n, invlogit(a+b*x))
dbinom(y[1], n[1], invlogit(a+b*x[1]))
dbinom(y[1], n[1], invlogit(a+b*x[1]), log.p = T)
log_post <- function (a,b,y,n,x) sum (dbinom (y, n, invlogit(a+b*x), log=TRUE))
log_post <- function (a,b,y,n,x) sum (dbinom (y, n, invlogit(a+b*x), log=TRUE))
dbinom (y, n, invlogit(a+b*x), log=TRUE)
grid.points <- expand.grid(a0, b0)
post.ord <- apply(grid.points, MARGIN = 1, FUN = log_post, y = y, n = n, x = x)
head(grid.points)
log_post <- function (a,b,y,n,x) exp^(sum (dbinom (y, n, invlogit(a+b*x), log=TRUE)))
post.ord <- apply(grid.points, MARGIN = 1, function(grid) log_post(grid[1], grid[2], y = y, n = n, x = x)
)
log_post <- function (a,b,y,n,x) exp^(sum (dbinom (y, n, invlogit(a+b*x), log=TRUE)))
post.ord <- apply(grid.points, 1, function(grid) log_post(grid[1], grid[2], y = y, n = n, x = x))
head(grid.points)
post.ord <- apply(grid.points, 1, function(t) log_post(a = t[1], b = t[2], y = y, n = n, x = x))
log_post <- function (a,b,y,n,x) {
loglik = sum (dbinom (y, n, invlogit(a+b*x), log=TRUE))
return(exp^(loglik))
}
log_post <- function (a,b,y,n,x) {
loglik = sum (dbinom (y, n, invlogit(a+b*x), log=TRUE))
return(exp(loglik))
}
post.ord <- apply(grid.points, 1, function(t) log_post(a = t[1], b = t[2], y = y, n = n, x = x))
post.ord
filled.contour(grid.points, post.ord)
filled.contour(grid.points, z = post.ord)
filled.contour(x = grid.points[, 1], y = grid.points[, 2], z = post.ord)
head(grid.points)
tail(grid.points)
filled.contour(x = grid.points$Var1, y = grid.points$Var2, z = post.ord)
?filled.contour
hist(post.ord)
sample.indices <- sample(1:nrow(grid.points), size = 10000, replace = T, prob = post.ord)
sim.posterior <- grid.points[sample.indices, ]
hist(sim.posterior[, 1])
hist(sim.posterior[, 2])
contour(x = grid.points$Var1, y = grid.points$Var2, z = post.ord)
grid.points$Var1
image.maker <- function(coords, value){
N <- length(unique(coords[,1]))
image.out <- matrix(NA, nrow = N, ncol = N)
coords[,1] <- as.numeric(factor(coords[,1]))
coords[,2] <- as.numeric(factor(coords[,2]))
for (i in 1:nrow(coords))
image.out[coords[i,1], coords[i,2]] <- value[i]
return(image.out)
}
image.maker(grid.points, post.ord)
for (t1 in a0) {
for (t2 in b0) {
log_post(a = t1, b = t2, y = y, n = n, x = x)
}
}
post.ord <- NULL
for (t1 in a0) {
for (t2 in b0) {
post0 = log_post(a = t1, b = t2, y = y, n = n, x = x)
post.ord = c(post.ord, post0)
}
}
post.ord <- NULL
for (t1 in a0) {
for (t2 in b0) {
post0 = log_post(a = t1, b = t2, y = y, n = n, x = x)
post.ord = rbind(post.ord, c(t1, t2, post0))
}
}
dim(post.ord)
sample.indices <- sample(1:nrow(post.ord), size = 10000, replace = T, prob = post.ord[, 3])
head(sample.indices)
sim.posterior <- post.ord[sample.indices, ]
hist(sim.posterior[, 1])
hist(sim.posterior[, 2])
contour(post.ord)
head(post.ord)
head(post.ord)
contour(x = post.ord[, 1], y = post.ord[, 2], z = post.ord[, 3])
rm(list = ls())
setwd("~/Dropbox/GitHub/Adsp")
load("data/glmList_epis_Apoe2.rdt"); list <- glmList
for(obj in names(list)) assign(obj, list[[obj]])
head(vep)
vep[vep$Symbol == "LRG1", ]
rm(list = ls())
setwd("~/Dropbox/GitHub/Adsp")
load("data/glmList_epis_Apoe2.rdt"); list <- glmList
for(obj in names(list)) assign(obj, list[[obj]])
gwas.lod <- filter(gwas, LOD > 15) # permutation cut
head(gwas)
library(dplyr)
gwas.lod <- filter(gwas, LOD > 15) # permutation cut
head(gwas.lod)
sum(gwas.lod$LOD > 16)
sum(gwas.lod$LOD > 20)
sum(gwas.lod$LOD > 18)
vep.lod <- filter(vep, UID %in% gwas.lod$UID)
head(vep.lod)
gwas_vep_lod <- cbind(vep.lod, gwas.lod[match(vep.lod$UID, gwas.lod$UID), ])
gwas_vep_lod <- gwas_vep_lod[with(gwas_vep_lod, pSnp + pApoe2 + pEpis < -1), ]
head(gwas_vep_lod)
table(gwas_vep_lod$Consequence)
library(xlsx)
write.xlsx(gwas_vep_lod, file = "GWAS/table(244)_revised.xlsx", sheetName = "Epis_Apoe2", append = T)
head(gwas_vep_lod)
rm(list = ls())
setwd("~/Dropbox/GitHub/Adsp")
load("data/glmList_epis_Apoe4.rdt"); list <- glmList
for(obj in names(list)) assign(obj, list[[obj]])
gwas.lod <- filter(gwas, LOD > 15) # permutation cut
vep.lod <- filter(vep, UID %in% gwas.lod$UID)
gwas_vep_lod <- cbind(vep.lod, gwas.lod[match(vep.lod$UID, gwas.lod$UID), ])
gwas_vep_lod <- gwas_vep_lod[with(gwas_vep_lod, pSnp + pApoe4 + pEpis > 1), ]
write.xlsx(gwas_vep_lod, file = "GWAS/table(244)_revised.xlsx", sheetName = "Epis_Apoe4", append = T)
library(ape)
library(amap)
library(sva)
library(dplyr)
library(reshape)
library(ggvis)
library(ggplot2)
library(Biobase)
library(genefilter)
library(preprocessCore)
library(biomaRt)
library(quantro)
library(matrixStats)
library(xlsx)
rm(list = ls())
source("~/Dropbox/X/function.R")
setwd("~/Dropbox/GitHub/Lupus/B6(array)")
load("array.rdt") # Saved
for(obj in names(array)) assign(obj, array[[obj]])
(summary = table(sInf$Cell.Type, sInf$Group))
table(sInf$Sample.Prep.Sort.Date, sInf$Affy.Date)
mutate(melt(t(b6)), group = sInf$Group[match(X1, sInf$Sample.Name)]) %>%
ggplot(aes(X1,value,color=group)) + geom_boxplot() + xlab("") +
theme(axis.text.x=element_text(angle=90))
b6 = b6[sInf$Sample.Prep.Sort.Date != "20120530"]
sInf = sInf[sInf$Sample.Prep.Sort.Date != "20120530", ]
b6_t = b6[sInf$Cell.Type == "T"]
sInf_t = sInf[sInf$Cell.Type == "T", ]
svd = svd(b6 - rowMeans(b6))
svd.pc <- diag(svd$d) %*% t(svd$v)
plot(svd$d^2 / sum(svd$d^2), ylim = c(0, 1), type = "b", ylab = "Percentage variation")
plot(t(cor(as.numeric(as.factor(sInf_t$Sample.Prep.Sort.Date)), svd$v)), ylab = "Correlation")
cols = as.numeric(as.factor(sInf_t$Sample.Prep.Sort.Date))
plot(svd$v[, 1], svd$v[, 2], col = cols, pch = 16, xlab = "PC 1", ylab = "PC 2")
(cell = factor(sInf$Cell.Type, levels = c("B", "T")))
(genoAll = factor(sInf$Group, levels = c("B6", "Yaa", "Yaa-IL21R", "Yaa-Nfkb1")))
(genoYaa = factor(gsub("(B6|Yaa).*", "\\1", sInf$Group), levels = c("B6", "Yaa")))
genoIL21R = factor(rep("WT", 28), levels = c("WT", "IL21R")); genoIL21R[grep("IL21R", sInf$Group)] = "IL21R"
genoNfkb1 = factor(rep("WT", 28), levels = c("WT", "Nfkb1")); genoNfkb1[grep("Nfkb1", sInf$Group)] = "Nfkb1"
(batchSort = factor(sInf$Sample.Prep.Sort.Date))
(batchAffy = factor(sInf$Affy.Date))
(model = model.matrix(~ cell + cell * genoYaa + cell * genoIL21R + cell * genoNfkb1))
sva_fit = sva(as.matrix(b6), model)
cor(sva_fit$sv[, 1], svd$v)
cor(sva_fit$sv[, 2], svd$v)
cor(sva_fit$sv[, 3], svd$v)
(X = model.matrix(~ cell + cell * genoYaa + cell * genoIL21R + cell * genoNfkb1 + sva_fit$sv))
fit0 <- apply(b6, 1, function (x) summary(lm(x ~ X - 1)))
sv = sapply(fit0, function(x) x$coefficients[c("Xsva_fit$sv1", "Xsva_fit$sv2", "Xsva_fit$sv3"), "Estimate"])
b6_res = as.matrix(b6) - t(sva_fit$sv %*% sv)
mycol = as.numeric(as.factor(sInf$Sample.Prep.Sort.Date))
hc1 <- hcluster(t(b6), method = "pearson", link = "average") %>% as.phylo
hc2 <- hcluster(t(b6_res), method = "pearson", link = "average") %>% as.phylo
hc1$tip.label = hc2$tip.label = paste(sInf$Cell.Type, sInf$Group, sep = "-")
par(mar = c(5, 0, 4, 2), mfrow = c(1, 1))
plot(hc1, cex=0.7, tip.color = mycol)
plot(hc2, cex=0.7, tip.color = mycol)
legend("top", levels(as.factor(sInf$Sample.Prep.Sort.Date)), cex = 0.7, fill=1:3, bg="white")
(X = model.matrix(~ cell + cell * genoYaa + cell * genoIL21R + cell * genoNfkb1))
fit1 <- apply(b6_res, 1, function (x) summary(lm(x ~ X - 1)))
fit.e = t(sapply(fit1, function(x) x$coefficients[-1, "Estimate"]))
fit.p = t(sapply(fit1, function(x) x$coefficients[-1, "Pr(>|t|)"]))
head(fit.p)
nrow(b6_res)
nrow(fit.p)
sig = apply(fit.p, 2, function(x) sum(x < 0.05))
sig
geneAll = rownames(fit.p)
myList = sapply(colnames(fit.p), function(x) geneAll[fit.p[, x] < 0.05])
names(myList) <- gsub(":", "-", names(myList))
myList[[1]]
head(b6_res)
myList = sapply(colnames(fit.p), function(x) {
y = cbind(Pval = fit.p[, x], Size = fit.e[, x])
y[y$Pval < 0.05, ]
})
x = colnames(fit.p)[1]
y = cbind(Pval = fit.p[, x], Size = fit.e[, x])
myList = sapply(colnames(fit.p), function(x) {
y = cbind(Pval = fit.p[, x], Size = fit.e[, x])
y[y[, "Pval"] < 0.05, ]
})
myList[[1]]
lapply(myList, length)
head(myList[[1]])
myList = sapply(colnames(fit.p), function(x) geneAll[fit.p[, x] < 0.05])
lapply(myList, length)
myList = sapply(colnames(fit.p), function(x) {
y = cbind(Pval = fit.p[, x], Size = fit.e[, x])
y[y[, "Pval"] < 0.05, ]
})
lapply(myList, length)
lapply(myList, nrow)
names(myList) <- gsub(":", "-", names(myList))
dir()
lapply(names(myList), function(x) write.xlsx(myList[[x]], file = "myfile.xlsx", sheetName = x, append = T))
getwd()
b6_write = b6_re
b6_write = b6_res
dim(b6_write)
nrow(sInf)
head(sInf)
sInf$Group
group_all = unique(sInf$Group)
group_all
group_all = c( "B6", "Yaa", "Yaa-Nfkb1", "Yaa-IL21R")
str(b6_res)
sapply(group_all, function(x) rowMeans(b6_res[, sInf$Group == x]))
b6_avg = sapply(group_all, function(x) rowMeans(b6_res[, sInf$Group == x]))
dim(b6_avg)
head(b6_avg)
write.xlsx(b6_avg, file = "../myfile.xlsx", sheetName = "Expression", append = T)
