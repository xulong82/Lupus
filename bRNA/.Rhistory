chromStart = spleen.rna$chromStart - 2000,
chromEnd   = spleen.rna$chromStart + 2000,
gene       = spleen.rna$V2,
RPKM       = spleen.rna$RPKM)
testis.rna.pm <- data.frame(chrom      = testis.rna$chrom,
chromStart = testis.rna$chromStart - 2000,
chromEnd   = testis.rna$chromStart + 2000,
gene       = testis.rna$V2,
RPKM       = testis.rna$RPKM)
rna.pm.bi <- cbind(myBinary(brain.rna.pm), myBinary(spleen.rna.pm), myBinary(testis.rna.pm))
colnames(rna.bi) <- c("Brain/RNA", "Spleen/RNA", "Testis/RNA")
colnames(rna.pm.bi) <- c("Brain/RNA", "Spleen/RNA", "Testis/RNA")
load("~/Dropbox/Encode/R/analysis1.20140314.RData")
setwd("~/Dropbox/Encode/RNA-seq")
brain.rna <- read.delim("wgEncodeCshlLongRnaSeqWbrainE14halfGeneEnsV65IAcuff-Rev.gtf", header = F)
spleen.rna <- read.delim("wgEncodeCshlLongRnaSeqSpleenAdult8wksGeneEnsV65IAcuff-Rev.gtf", header = F)
testis.rna <- read.delim("wgEncodeCshlLongRnaSeqTestisAdult8wksGeneEnsV65IAcuff-Rev.gtf", header = F)
brain.rna <- data.frame(chrom      = brain.rna$V1,
chromStart = brain.rna$V4,
chromEnd   = brain.rna$V5,
gene       = brain.rna$V9,
RPKM       = rowMeans(brain.rna[11:12]))
spleen.rna <- data.frame(chrom      = spleen.rna$V1,
chromStart = spleen.rna$V4,
chromEnd   = spleen.rna$V5,
gene       = spleen.rna$V9,
RPKM       = rowMeans(spleen.rna[11:12]))
testis.rna <- data.frame(chrom      = testis.rna$V1,
chromStart = testis.rna$V4,
chromEnd   = testis.rna$V5,
gene       = testis.rna$V9,
RPKM       = rowMeans(testis.rna[11:12]))
brain.rna <- unique(brain.rna)
ensembl2symbol.map <- read.delim("~/Dropbox/Encode/ensembl2symbol.map", sep = "\t", header = F)
brain.rna <- merge(brain.rna, ensembl2symbol.map, by.x = "gene", by.y = "V1", all.x = T)
spleen.rna <- merge(spleen.rna, ensembl2symbol.map, by.x = "gene", by.y = "V1", all.x = T)
testis.rna <- merge(testis.rna, ensembl2symbol.map, by.x = "gene", by.y = "V1", all.x = T)
#--- RNA filter in myanalysis1.R
brain.rna <- brain.rna[brain.rna$RPKM > 2, ]  # analysis 1
spleen.rna <- spleen.rna[spleen.rna$RPKM > 2, ]
testis.rna <- testis.rna[testis.rna$RPKM > 2, ]
brain.rna.pm <- data.frame(chrom      = brain.rna$chrom,
chromStart = brain.rna$chromStart - 2000,
chromEnd   = brain.rna$chromStart + 2000,
gene       = brain.rna$V2,
RPKM       = brain.rna$RPKM)
spleen.rna.pm <- data.frame(chrom      = spleen.rna$chrom,
chromStart = spleen.rna$chromStart - 2000,
chromEnd   = spleen.rna$chromStart + 2000,
gene       = spleen.rna$V2,
RPKM       = spleen.rna$RPKM)
testis.rna.pm <- data.frame(chrom      = testis.rna$chrom,
chromStart = testis.rna$chromStart - 2000,
chromEnd   = testis.rna$chromStart + 2000,
gene       = testis.rna$V2,
RPKM       = testis.rna$RPKM)
rna.pm.bi <- cbind(myBinary(brain.rna.pm), myBinary(spleen.rna.pm), myBinary(testis.rna.pm))
colnames(rna.pm.bi) <- c("Brain/RNA", "Spleen/RNA", "Testis/RNA")
marks.pm.rna.bi <- cbind(marks.pm.bi[, 1:4] * rna.pm.bi[, 1],  # marked, expressed
marks.pm.bi[, 5:8] * rna.pm.bi[, 2], marks.pm.bi[, 9:12] * rna.pm.bi[, 3])
marks.pm.rna.cm.bi <- marks.pm.rna.bi[, 1:4] * marks.pm.rna.bi[, 5:8] * marks.pm.rna.bi[, 9:12]
colnames(marks.pm.rna.cm.bi) <- c("h3k4me1", "h3k4me3", "h3k27me3", "h3k27ac")
rna.pm.nb <- apply(rna.pm.bi, 2, myCount1)  # expressed, with > 2 RPKM
marks.pm.rna.nb <- myParallel1(marks.pm.rna.bi)  # marked, expressed
marks.pm.rna.cm.nb <- myParallel1(marks.pm.rna.cm.bi)  # marked, expressed, common
library(parallel)
brain.rna
brain.rna[, c(1:4, 6)]
a = brain.rna[, c(1:4, 6)]
b = spleen.rna[, c(1:4, 6)]
union[a, b]
c = unique(rbind[a, b])
c = unique(rbind9a, b0)
c = unique(rbind(a, b0)
)
c = unique(rbind(a, b))
union(a, b)
d = union(a, b)
head(d)
rm(d)
head(c)
marks.pm.rna.nb <- myParallel1(marks.pm.rna.bi)  # marked, expressed
marks.pm.rna.cm.nb <- myParallel1(marks.pm.rna.cm.bi)  # marked, expressed, common
marks.rna.nb <- rbind(rep(marks.pm.rna.cm.nb, 3),  # marked, expressed, common
marks.pm.rna.nb - rep(marks.pm.rna.cm.nb, 3),  # marked, expressed, not-common
marks.pm.nb - marks.pm.rna.nb,  # marked, not-expressed
rna.pm.nb - marks.pm.rna.nb)  # expressed, not marked
ratio1 <- (marks.rna.nb[1, ] / colSums(marks.rna.nb[1:2, ])) * 100
par(mfrow = c(1, 1), mar = c(5, 10, 4, 2), font = 2)
barplot(marks.rna.nb[c(1, 2, 3), sort.marks], space = c(.6, .2, .2), horiz = T, las = 1, font = 2,
xlab = "Gene Number", xlim = c(0, 12000), font.lab = 2, col = terrain.colors(3))
abline(v = 0, lwd = 1, col = "black")
legend("topright", c("marked/expressed/common", "marked/expressed/not-common", "marked/not-expressed"),
fill = terrain.colors(3), box.lwd = 0)
par(mfrow = c(1, 1), mar = c(10, 20, 4, 20), font = 2)
barplot(ratio1[sort.marks], space = c(.9, .3, .3), las = 2, font = 2, font.lab = 2,
ylab = "Ratio (%)", col = terrain.colors(3))
abline(h = 0, lwd = 1, col = "black")
rm(a, b, c)
save.image("~/Dropbox/Encode/R/analysis1.20140317.RData")
rm(list= ls())
load("~/Dropbox/Encode/R/bi.RData")
setwd("~/Dropbox/Encode/RNA-seq")
brain.rna <- read.delim("wgEncodeCshlLongRnaSeqWbrainE14halfGeneEnsV65IAcuff-Rev.gtf", header = F)
spleen.rna <- read.delim("wgEncodeCshlLongRnaSeqSpleenAdult8wksGeneEnsV65IAcuff-Rev.gtf", header = F)
testis.rna <- read.delim("wgEncodeCshlLongRnaSeqTestisAdult8wksGeneEnsV65IAcuff-Rev.gtf", header = F)
brain.rna <- data.frame(chrom      = brain.rna$V1,
chromStart = brain.rna$V4,
chromEnd   = brain.rna$V5,
gene       = brain.rna$V9,
RPKM       = rowMeans(brain.rna[11:12]))
spleen.rna <- data.frame(chrom      = spleen.rna$V1,
chromStart = spleen.rna$V4,
chromEnd   = spleen.rna$V5,
gene       = spleen.rna$V9,
RPKM       = rowMeans(spleen.rna[11:12]))
testis.rna <- data.frame(chrom      = testis.rna$V1,
chromStart = testis.rna$V4,
chromEnd   = testis.rna$V5,
gene       = testis.rna$V9,
RPKM       = rowMeans(testis.rna[11:12]))
brain.rna <- unique(brain.rna)
ensembl2symbol.map <- read.delim("~/Dropbox/Encode/ensembl2symbol.map", sep = "\t", header = F)
brain.rna <- merge(brain.rna, ensembl2symbol.map, by.x = "gene", by.y = "V1", all.x = T)
spleen.rna <- merge(spleen.rna, ensembl2symbol.map, by.x = "gene", by.y = "V1", all.x = T)
testis.rna <- merge(testis.rna, ensembl2symbol.map, by.x = "gene", by.y = "V1", all.x = T)
brain.rna <- brain.rna[brain.rna$RPKM > 2, ]
spleen.rna <- spleen.rna[spleen.rna$RPKM > 2, ]
testis.rna <- testis.rna[testis.rna$RPKM > 2, ]
brain.rna <- brain.rna[brain.rna$chrom != "chrMT", ]
spleen.rna <- spleen.rna[spleen.rna$chrom != "chrMT", ]
testis.rna <- testis.rna[testis.rna$chrom != "chrMT", ]
?rbind
head(brain.rna)
gene.space <- unique(rbind(brain.rna[, c(1:4, 6)], spleen.rna[, c(1:4, 6)]), testis.rna[, c(1:4, 6)])
gene.space <- unique(rbind(brain.rna[, c(1:4, 6)], spleen.rna[, c(1:4, 6)], testis.rna[, c(1:4, 6)]))
head(gene.space)
gene.space <- c(ensembl = gene.space$gene, symbol = gene.space$V2, gene.space[, 2:4])
head(gene.space)
gene.space <- unique(rbind(brain.rna[, c(1:4, 6)], spleen.rna[, c(1:4, 6)], testis.rna[, c(1:4, 6)]))
gene.space <- cbind(ensembl = gene.space$gene, symbol = gene.space$V2, gene.space[, 2:4])
head(gene.space)
head(brain.rna)
brain.rna <- merge(gene.space, brain.rna, by.x <- "ensembl", by.y <- "gene", all.x = T)
head(brain.rna)
brain.rna <- merge(gene.space, brain.rna, by.x = "ensembl", by.y = "gene", all.x = T)
head(brain.rna)
brain.rna = brain.rna[, c(1:5, 9)]
head(brain.rna)
head(testis.rna)
spleen.rna <- merge(gene.space, spleen.rna[, c(1, 5)], by.x = "ensembl", by.y = "gene", all.x = T)
head(spleen.rna)
testis.rna <- merge(gene.space, testis.rna[, c(1, 5)], by.x = "ensembl", by.y = "gene", all.x = T)
str(spleen.rna)
spleen.rna[is.na(spleen.rna)] <- 0
head(spleen.rna)
setwd("~/Dropbox/Encode/RNA-seq")
brain.rna <- read.delim("wgEncodeCshlLongRnaSeqWbrainE14halfGeneEnsV65IAcuff-Rev.gtf", header = F)
spleen.rna <- read.delim("wgEncodeCshlLongRnaSeqSpleenAdult8wksGeneEnsV65IAcuff-Rev.gtf", header = F)
testis.rna <- read.delim("wgEncodeCshlLongRnaSeqTestisAdult8wksGeneEnsV65IAcuff-Rev.gtf", header = F)
brain.rna <- data.frame(chrom      = brain.rna$V1,
chromStart = brain.rna$V4,
chromEnd   = brain.rna$V5,
gene       = brain.rna$V9,
RPKM       = rowMeans(brain.rna[11:12]))
spleen.rna <- data.frame(chrom      = spleen.rna$V1,
chromStart = spleen.rna$V4,
chromEnd   = spleen.rna$V5,
gene       = spleen.rna$V9,
RPKM       = rowMeans(spleen.rna[11:12]))
testis.rna <- data.frame(chrom      = testis.rna$V1,
chromStart = testis.rna$V4,
chromEnd   = testis.rna$V5,
gene       = testis.rna$V9,
RPKM       = rowMeans(testis.rna[11:12]))
brain.rna <- unique(brain.rna)
ensembl2symbol.map <- read.delim("~/Dropbox/Encode/ensembl2symbol.map", sep = "\t", header = F)
brain.rna <- merge(brain.rna, ensembl2symbol.map, by.x = "gene", by.y = "V1", all.x = T)
spleen.rna <- merge(spleen.rna, ensembl2symbol.map, by.x = "gene", by.y = "V1", all.x = T)
testis.rna <- merge(testis.rna, ensembl2symbol.map, by.x = "gene", by.y = "V1", all.x = T)
brain.rna <- brain.rna[brain.rna$RPKM > 2, ]
spleen.rna <- spleen.rna[spleen.rna$RPKM > 2, ]
testis.rna <- testis.rna[testis.rna$RPKM > 2, ]
brain.rna <- brain.rna[brain.rna$chrom != "chrMT", ]
spleen.rna <- spleen.rna[spleen.rna$chrom != "chrMT", ]
testis.rna <- testis.rna[testis.rna$chrom != "chrMT", ]
brain.rna <- merge(gene.space, brain.rna[, c(1, 5)], by.x = "ensembl", by.y = "gene", all.x = T)
spleen.rna <- merge(gene.space, spleen.rna[, c(1, 5)], by.x = "ensembl", by.y = "gene", all.x = T)
testis.rna <- merge(gene.space, testis.rna[, c(1, 5)], by.x = "ensembl", by.y = "gene", all.x = T)
head(testis.rna)
head(brain.rna)
rna.mt <- data.frame(row.names = brain.rna$symbol, brain.rna$RPKM, spleen.rna$RPKM, testis.rna$RPKM)
unique(brain.rna$symbol)
str(unique(brain.rna$symbol))
head(brain.rna)
rna.mt <- data.frame(row.names = brain.rna$ensembl, brain.rna$RPKM, spleen.rna$RPKM, testis.rna$RPKM)
rna.mt <- data.frame(row.names = brain.rna$symbol, brain.rna$RPKM, spleen.rna$RPKM, testis.rna$RPKM)
rna.mt <- data.frame(row.names = brain.rna$ensembl, brain.rna$RPKM, spleen.rna$RPKM, testis.rna$RPKM)
head(rna.mt)
rna.mt[is.na(rna.mt)] <- 0
head(rna.mt)
head(marks.bi)
head(gene.space)
head(gene.space[, 3:5])
marks.mt <- data.frame(row.names = brain.rna$ensembl,  # gene IDs
myCount2(gene.space[, 3:5], marks.bi)
apply(marks.bi, 2, function(x) {myCount2(gene.space[, 3:5], x)}))
marks.mt <- data.frame(row.names = brain.rna$ensembl,  # gene IDs
apply(marks.bi, 2, function(x) {myCount2(gene.space[, 3:5], x)}))
source('~/Dropbox/Encode/R/myfunctions.R')
marks.mt <- data.frame(row.names = brain.rna$ensembl,  # gene IDs
apply(marks.bi, 2, function(x) {myCount2(gene.space[, 3:5], x)}))
head(marks.mt)
head(rna.mt)
save.image("~/Dropbox/Encode/R/analysis2.20140317.RData")
rm(list=ls())
library(pheatmap)
source("~/Dropbox/Lupus/R/myfunctions.R")
library(affy)
library(oligo)
library(limma)
library(pheatmap)
cel.files <- read.celfiles(list.celfiles("~/Dropbox/Lupus/Yaa/B6/CEL2", full.name = T))
mogene2symbol.map <- read.delim("~/Dropbox/Lupus/Yaa/mogene2symbol.map", sep = "\t", header = T)
norm.rma <- rma(cel.files, target = "core")  # RMA, gene level summarization
show(norm.rma)
eset <- exprs(norm.rma)
colnames(eset) <- c("YAA", "YAA", rep("WT", 3))
eset.f <- as.data.frame(eset[apply(eset[, 1:2], 1, var) != 0, ])
eset.f <- as.data.frame(eset.f[apply(eset.f[, 3:5], 1, var) != 0, ])
eset.1 <- merge(mogene2symbol.map, eset.f, by.x = "Affy.MoGene.probeset", by.y = "row.names", all.y = T)
eset.1 <- aggregate(. ~ Associated.Gene.Name, data = eset.1[-1], max)  # Aggregate multiple records
b6.yaa <- as.matrix(eset.1[, c(4:6, 2:3)])
rownames(b6.yaa) <- eset.1$Associated.Gene.Name
ttest <- apply(b6.yaa, 1, function(x) {t.test(x[1:3], x[4:5])})
ttest.p <- sapply(ttest, function(x) {x[["p.value"]]})
ttest.p.adjust <- p.adjust(ttest.p, method = "fdr", n = length(ttest.p))
ttest.sig <- ttest.p.adjust[ttest.p.adjust <= 0.05]
b6.yaa.f <- b6.yaa[which(ttest.p < 0.1), ]
design <- cbind(rep(1, 5), c(0, 0, 0, 1, 1))
dimnames(design) <- list(c(1:5), c("WT", "Yaa-WT"))
lm.fit.f <- eBayes(lmFit(b6.yaa.f, design))
probeset.list <- topTable(lm.fit.f, coef = 2, number = 2000, p.value = .05, adjust.method = "fdr")
lm.p <- lm.fit.f$p.value[, 2]
b6.yaa.m <- data.frame(row.names = rownames(b6.yaa),
B6.WT     = rowMeans(b6.yaa[, 1:3]),
B6.YAA    = rowMeans(b6.yaa[, 4:5]))
library(DESeq)
bxsb.counts <- read.delim("~/Dropbox/Lupus/Yaa/BXSB/counts.txt", sep = "\t", header = T)
head(bxsb.counts)
bxsb.counts <- data.frame(row.names = bxsb.counts$Gene, bxsb.counts[, c(2 * (1:7))])
colnames(bxsb.counts) <- list("BXSB_B6_1", "BXSB_B6_2", "BXSB_B6_3",
"BXSB_YAA_1", "BXSB_YAA_2", "BXSB_YAA_3", "BXSB_YAA_4")
bxsb.counts.m <- data.frame(row.names = rownames(bxsb.counts),
BXSB.YAA  = rowMeans(bxsb.counts[, 4:7]),
BXSB.B6   = rowMeans(bxsb.counts[, 1:3]))
mycounts <- bxsb.counts[(rowSums(bxsb.counts) > 7), ]
cond <- as.factor(c(rep("BXSB_B6", 3),
rep("BXSB_YAA", 4)))
cds <- newCountDataSet(mycounts, cond)
cds <- estimateSizeFactors(cds)  # Library size normalization
cds <- estimateDispersions(cds)  # Dispersion estimation
# Distance plot
cdsblind <- estimateDispersions(cds, method = "blind")
vsd <- getVarianceStabilizedData(cdsblind)
dists <- dist(t(vsd))
cors <- cor(vsd)
pheatmap(as.matrix(dists), fontsize = 16, fontsize_number = 10, display_number = T,
treeheight_row = 150, treeheight_col = 0, cellwidth = 38, cellheight = 40)
deseq <- nbinomTest(cds, "BXSB_B6", "BXSB_YAA")
sig <- 0.05
sig.deseq <- diff.deseq[deseq$padj < sig, ]
sig.deseq <- deseq[deseq$padj < sig, ]
sig.deseq.up <- sig.deseq[sig.deseq$log2FoldChange > 0, ]  # YAA vs B6
sig.deseq.dn <- sig.deseq[sig.deseq$log2FoldChange < 0, ]  # YAA vs B6
il21 <- read.csv("~/Dropbox/Lupus/RSEM/roopenian.genes.count", sep = " ", header = F)
il21 <- aggregate(. ~ V1, data = il21, max)  # Aggregate multiple records
il21 <- data.frame(row.names = il21$V1,  # # Calculate mean of the replicates
IL21.N.CD28.N = rowMeans(il21[2:3]),
IL21.N.CD28.P = rowMeans(il21[4:5]),
IL21.P.CD28.P = rowMeans(il21[6:7]))
head(il21)
library(EBSeq)
load("~/Dropbox/Lupus/R/Lupus_rsem.RData")  # genes
multipp.genes <- GetMultiPP(ebout1)
pp.genes <- multipp.genes$PP
multifc.genes <- GetMultiFC(ebout1)
log2fc.genes <- multifc.genes$Log2FCMat
means.genes <- multifc.genes$CondMeans
pp.means.log2fc.genes = cbind(pp.genes, means.genes, log2fc.genes)
save(pp.means.log2fc.genes, "~/Dropbox/Lupus/R/deseq.gene.RData")
save(pp.means.log2fc.genes, file = "~/Dropbox/Lupus/R/deseq.gene.RData")
cutoff <- 0.95
type <- pp.means.log2fc.genes
for (i in 1:5) {
name1 <- paste("de.pattern", i, sep = "")
name2 <- paste("Pattern", i, sep = "")
assign(name1, subset(type, type[, name2] >= cutoff))
}
sig.1 <- rbind(de.pattern2, de.pattern3, de.pattern4, de.pattern5)
cutoff <- 0.75
for (i in 1:5) {
name1 <- paste("de.pattern", i, sep = "")
name2 <- paste("Pattern", i, sep = "")
assign(name1, subset(type, type[, name2] >= cutoff))
}
sig.2 <- rbind(de.pattern2, de.pattern3, de.pattern4, de.pattern5)  # cutoff = .75
save(sig.1, sig.2, file = "~/Dropbox/Lupus/R/sig.deseq.gene.RData")
load("~/Dropbox/Lupus/R/sig.deseq.gene.RData")  # sig.1:.95 cutoff; sig.2: .75 cutoff
ensembl2symbol.map <- read.delim("~/Dropbox/Lupus/ensembl2symbol.map", sep = "\t", header = F)
il21.1 <- merge(sig.1, ensembl2symbol.map, by.x = "row.names", by.y = "V1", all.x = T)
il21.1 <- aggregate(. ~ V2, data = il21.1[-1], max)  # Aggregate multiple records
il21.1 <- data.frame(row.names = il21.1$V2, il21.1[, 2:12])
head(il21.1)
il21.2 <- merge(sig.2, ensembl2symbol.map, by.x = "row.names", by.y = "V1", all.x = T)
il21.2 <- aggregate(. ~ V2, data = il21.2[-1], max)  # Aggregate multiple records
il21.2 <- data.frame(row.names = il21.2$V2, il21.2[, 2:12])
list.bx <- sig.deseq[sig.deseq$id %in% rownames(il21), ]$id  # Sig genes in BXSB strain
list.b6 <- rownames(probeset.list)[rownames(probeset.list) %in% rownames(il21)]  # Sig genes in B6
list.il <- rownames(il21.2)
bx.il <- intersect(list.bx, list.il)
il21.3 <- il21.2[rownames(il21.2) %in% bx.il, ]
il21.3 <- il21.3[order(rownames(il21.3)), ][, 6:8]
bxsb.2 <- sig.deseq[sig.deseq$id %in% bx.il, ]
bxsb.2 <- bxsb.2[order(bxsb.2$id), ][, 3:4]
data.bx.il <- cbind(il21.3, bxsb.2)
str(list.bx)
str(il21.3)
str(il21.2)
b6.il <- intersect(list.b6, list.il)
il21.4 <- il21.2[rownames(il21.2) %in% b6.il, ]
il21.4 <- il21.4[order(rownames(il21.4)), ][, 6:8]
b6.2 <- b6.yaa.m[rownames(b6.yaa.m) %in% b6.il, ]
b6.2 <- b6.2[order(rownames(b6.2)), ]
data.b6.il <- cbind(il21.4, b6.2)
str(list.b6)
str(b6.il)
par(mfrow = c(1, 2))
venn.diagram(list(BXSB = 1:2966, IL21 = 1:2903 + (2966 - 880)), file = "1.tiff", fill = c("red", "green"))
library("VennDiagram", lib.loc="/Users/xwang/Library/R/3.0/library")
library(VennDiagram)
venn.diagram(list(BXSB = 1:2966, IL21 = 1:2903 + (2966 - 880)), file = "1.tiff", fill = c("red", "green"))
venn.diagram(list(B6 = 1:1454, IL21 = 1:2903 + (1454 - 234)), file = "5.tiff", fill = c("red", "green"))
getwd()
setwd("~/Dropbox/Lupus/Yaa")
head(data.bx.il)
head(data.b6.il)
colnames(data.bx.il) <- c("VNIN", "VNIP", "VPIP", "B6", "YAA")
colnames(data.bx.il) <- c("VNIN", "VNIP", "VPIP", "B6", "YAA")
head(data.bx.il)
head(data.b6.il)
colnames(data.b6.il) <- c("VNIN", "VNIP", "VPIP", "B6", "YAA")
head(data.b6.il)
save.image("~/Dropbox/Lupus/R/myanalysis5.20140317.RData")
clus.bx.il <- myCluster(data.bx.il)  # up/down clusters
clus.b6.il <- myCluster(data.b6.il)
table(clus.bx.il)
table(clus.b6.il)
venn.diagram(list(BXSB = 1:2966, IL21 = 1:2903 + (2966 - 880)), file = "1.tiff", fill = c("red", "green"))
venn.diagram(list(B6 = 1:1454, IL21 = 1:2903 + (1454 - 234)), file = "2.tiff", fill = c("red", "green"))
save.image("~/Dropbox/Lupus/R/myanalysis5.20140317.RData")
table.bx <- matrix(c(200, 46, 108, 211, 70, 245), nrow = 2)
table.b6 <- matrix(c(27, 32, 9, 75, 13, 78), nrow = 2)
fisher.test(table.bx)
fisher.test(table.b6)
write.table(rownames(data.bx.il)[clus.bx.il == 6], "~/Dropbox/Lupus/Yaa/bx.il21.6.txt")
write.table(rownames(data.b6.il)[clus.b6.il == 6], "~/Dropbox/Lupus/Yaa/b6.il21.6.txt")
head(il21)
data.b6 <- b6.yaa.m[rownames(b6.yaa.m) %in% list.b6, ]
data.b6 <- data.b6[order(rownames(data.b6)), ]
data.bx <- bxsb.counts.m[rownames(bxsb.counts.m) %in% list.bx, ]
data.bx <- data.bxsb[order(rownames(data.bx)), ]
bxsb.counts <- read.delim("~/Dropbox/Lupus/Yaa/BXSB/counts.txt", sep = "\t", header = T)
bxsb.counts <- data.frame(row.names = bxsb.counts$Gene, bxsb.counts[, c(2 * (1:7))])
colnames(bxsb.counts) <- list("BXSB_B6_1", "BXSB_B6_2", "BXSB_B6_3",
"BXSB_YAA_1", "BXSB_YAA_2", "BXSB_YAA_3", "BXSB_YAA_4")
bxsb.counts.m <- data.frame(row.names = rownames(bxsb.counts),
BXSB.YAA  = rowMeans(bxsb.counts[, 4:7]),
BXSB.B6   = rowMeans(bxsb.counts[, 1:3]))
save.image("~/Dropbox/Lupus/R/myanalysis5.20140317.RData")
data.b6 <- b6.yaa.m[rownames(b6.yaa.m) %in% list.b6, ]
data.b6 <- data.b6[order(rownames(data.b6)), ]
data.bx <- bxsb.counts.m[rownames(bxsb.counts.m) %in% list.bx, ]
data.bx <- data.bxsb[order(rownames(data.bx)), ]
data.b6 <- b6.yaa.m[rownames(b6.yaa.m) %in% list.b6, ]
data.b6 <- data.b6[order(rownames(data.b6)), ]
data.bx <- bxsb.counts.m[rownames(bxsb.counts.m) %in% list.bx, ]
data.bx <- data.bx[order(rownames(data.bx)), ]
data.il <- il21[rownames(il21) %in% list.bx, ]
data.il <- data.il[order(rownames(data.il)), ]
data.cb <- cbind(data.b6, data.il)
data.cb <- cbind(data.bx, data.il)
pheatmap(cor(data.cb, method = "spearman"), fontsize = 16, fontsize_number = 10, display_number = T,
treeheight_row = 150, treeheight_col = 0, cellwidth = 38, cellheight = 40)
data.il <- il21[rownames(il21) %in% list.b6, ]
data.il <- data.il[order(rownames(data.il)), ]
data.cb <- cbind(data.b6, data.il)
pheatmap(cor(data.cb, method = "spearman"), fontsize = 16, fontsize_number = 10, display_number = T,
treeheight_row = 150, treeheight_col = 0, cellwidth = 38, cellheight = 40)
yaa <- c("Msl3", "Tlr7", "Tmsb4x", "Rab9", "Prps2", "Trappc2", "Mid1", "Arhgap6")
intersect(list.il, yaa)
save.image("~/Dropbox/Lupus/R/myanalysis5.20140317.RData")
head(il21)
hg.il <- rownames(il21[apply(il21, 1, max) > 100, ])  # High genes in IL21
str(il21)
head(bxsb.counts.m)
str(bxsb.counts.m)
str(b6.yaa.m)
hist(b6.yaa.m)
hist(b6.yaa.m[, 1:2])
hist(b6.yaa.m[, 1])
hg.b6 <- rownames(b6.yaa.m[apply(b6.yaa.m, 1, max) > 5, ])  # High genes in BXSB
str(hg.b6)
hg.b6 <- rownames(b6.yaa.m[apply(b6.yaa.m, 1, max) > 6, ])  # High genes in BXSB
str(hg.b6)
hg.b6 <- rownames(b6.yaa.m[apply(b6.yaa.m, 1, max) > 5, ])  # High genes in BXSB
list.bx <- intersect(list.bx, hg.bx)
hg.il <- rownames(il21[apply(il21, 1, max) > 100, ])  # High genes in IL21
hg.bx <- rownames(bxsb.counts.m[apply(bxsb.counts.m, 1, max) > 100, ])  # High genes in BXSB
hg.b6 <- rownames(b6.yaa.m[apply(b6.yaa.m, 1, max) > 5, ])  # High genes in B6
list.bx <- intersect(list.bx, hg.bx)
list.b6 <- intersect(list.b6, hg.b6)
list.il <- intersect(list.il, hg.il)
data.b6 <- b6.yaa.m[rownames(b6.yaa.m) %in% list.b6, ]
data.b6 <- data.b6[order(rownames(data.b6)), ]
data.bx <- bxsb.counts.m[rownames(bxsb.counts.m) %in% list.bx, ]
data.bx <- data.bx[order(rownames(data.bx)), ]
data.il <- il21[rownames(il21) %in% list.bx, ]
data.il <- data.il[order(rownames(data.il)), ]
data.cb <- cbind(data.bx, data.il)
pheatmap(cor(data.cb, method = "spearman"), fontsize = 16, fontsize_number = 10, display_number = T,
treeheight_row = 150, treeheight_col = 0, cellwidth = 38, cellheight = 40)
data.il <- il21[rownames(il21) %in% list.b6, ]
data.il <- data.il[order(rownames(data.il)), ]
data.cb <- cbind(data.b6, data.il)
pheatmap(cor(data.cb, method = "spearman"), fontsize = 16, fontsize_number = 10, display_number = T,
treeheight_row = 150, treeheight_col = 0, cellwidth = 38, cellheight = 40)
bx.il <- intersect(list.bx, list.il)
il21.3 <- il21.2[rownames(il21.2) %in% bx.il, ]
il21.3 <- il21.3[order(rownames(il21.3)), ][, 6:8]
bxsb.2 <- sig.deseq[sig.deseq$id %in% bx.il, ]
bxsb.2 <- bxsb.2[order(bxsb.2$id), ][, 3:4]
data.bx.il <- cbind(il21.3, bxsb.2)
colnames(data.bx.il) <- c("VNIN", "VNIP", "VPIP", "B6", "YAA")
b6.il <- intersect(list.b6, list.il)
il21.4 <- il21.2[rownames(il21.2) %in% b6.il, ]
il21.4 <- il21.4[order(rownames(il21.4)), ][, 6:8]
b6.2 <- b6.yaa.m[rownames(b6.yaa.m) %in% b6.il, ]
b6.2 <- b6.2[order(rownames(b6.2)), ]
data.b6.il <- cbind(il21.4, b6.2)
colnames(data.b6.il) <- c("VNIN", "VNIP", "VPIP", "B6", "YAA")
clus.bx.il <- myCluster(data.bx.il)  # up/down clusters
clus.b6.il <- myCluster(data.b6.il)
str(list.bx)
table(clus.bx.il)
table(clus.b6.il)
fisher.test(table.bx)
fisher.test(table.b6)
str(list.bx)
str(list.b6)
str(list.il)
str(bx.il)
str(b6.il)
venn.diagram(list(BXSB = 1:2594, IL21 = 1:2336 + (2594 - 711)), file = "1.tiff", fill = c("red", "green"))
venn.diagram(list(B6 = 1:1424, IL21 = 1:2336 + (1424 - 211)), file = "2.tiff", fill = c("red", "green"))
bx.il.ids <- matrix(c(rownames(data.bx.il)[clus.bx.il == 6], rep("NULL", 1)), ncol = 10)
dimnames(bx.il.ids) <- list(c(1:18), c(1:10))
textplot(bx.il.ids)
textplot(bx.il.ids)
par(mar = c(5, 4, 4, 5))
textplot(bx.il.ids)
b6.il.ids <- matrix(c(rownames(data.b6.il)[clus.b6.il == 6], rep("NULL", 7)), ncol = 10)
dimnames(b6.il.ids) <- list(c(1:8), c(1:10))
textplot(b6.il.ids)
par(mar = c(5, 4, 4, 10))
textplot(bx.il.ids)
textplot(b6.il.ids)
par(mar = c(5, 4, 4, 15))
textplot(bx.il.ids)
textplot(b6.il.ids)
par(mar = c(5, 4, 4, 20))
textplot(bx.il.ids)
textplot(bx.il.ids)
bx.il.id <- matrix(c(rownames(data.bx.il)[clus.bx.il == 6], rep("NULL", 1)), ncol = 10)
dimnames(bx.il.id) <- list(c(1:18), c(1:10))
b6.il.id <- matrix(c(rownames(data.b6.il)[clus.b6.il == 6], rep("NULL", 7)), ncol = 10)
dimnames(b6.il.id) <- list(c(1:8), c(1:10))
bx.b6.id <- intersect(bx.il.id, b6.il.id)
venn.diagram(list(BXSB = 1:179, IL21 = 1:73 + (179 - 35)), file = "3.tiff", fill = c("red", "green"))
venn.diagram(list(BXSB = 1:179, B6 = 1:73 + (179 - 35)), file = "3.tiff", fill = c("red", "green"))
write.table(rownames(data.bx.il)[clus.bx.il == 6], "~/Dropbox/Lupus/Yaa/bx.il21.6.txt")
write.table(rownames(data.b6.il)[clus.b6.il == 6], "~/Dropbox/Lupus/Yaa/b6.il21.6.txt")
b6.il.id <- matrix(c(bx.b6.id, rep("NULL", 0)), ncol = 7)
dimnames(b6.il.id) <- list(c(1:5), c(1:7))
dimnames(b6.il.id) <- list(c(1:8), c(1:10))
b6.il.id <- matrix(c(rownames(data.b6.il)[clus.b6.il == 6], rep("NULL", 7)), ncol = 10)
dimnames(b6.il.id) <- list(c(1:8), c(1:10))
bx.b6.id <- intersect(bx.il.id, b6.il.id)
bx.b6.id <- matrix(c(bx.b6.id, rep("NULL", 0)), ncol = 7)
dimnames(bx.b6.id) <- list(c(1:5), c(1:7))
textplot(bx.b6.id)
intersect(bx.b6.id, tfdb)
tfdb <- read.delim("~/Dropbox/Lupus/TFdb.Riken.txt", header = F)  # 1675 TFs from Riken TFdb
intersect(bx.b6.id, tfdb$V1)
textplot(bx.il.id)
par(mar = c(5, 2, 4, 20))
textplot(bx.il.id)
str(bx.il.id)
par(mar = c(3, 2, 4, 20))
textplot(bx.il.id)
textplot(bx.il.id)
save.image("~/Dropbox/Lupus/R/myanalysis5.20140317.RData")
