gwas_genes <- lapply(gwas_genes, function(x) unlist(strsplit(x, ", ")))
gwas_genes <- lapply(gwas_genes, function(x) unlist(strsplit(x, " - ")))
gwas_genes <- unlist(gwas_genes) %>% unique
gwas_genes
(x = intersect(intron_genes, gwas_genes))
intron_genes
(x = intersect(intron_gene, gwas_genes))
y = lapply(gwas$MAPPED_GENE, function(x) unlist(strsplit(x, ", ")))
y = lapply(y, function(i) unlist(strsplit(i, " - ")))
idx = sapply(y, function(i) any(i %in% x))
gwas_select = gwas[idx, ]
gwas_select = gwascat[idx, ]
idx
(x = intersect(intron_gene, gwas_genes))
y = lapply(gwascat$MAPPED_GENE, function(x) unlist(strsplit(x, ", ")))
y = lapply(y, function(i) unlist(strsplit(i, " - ")))
idx = sapply(y, function(i) any(i %in% x))
gwas_select = gwascat[idx, ]
gwas_select
table(gwas_select$CONTEXT)
sort(table(gwas_select$DISEASE.TRAIT), decreasing = T)[1:20]
head(gwas_select)
sort(table(gwas_select$DISEASE.TRAIT), decreasing = T)[1:10]
gwas_select[grepl("cholesterol", gwas_select$DISEASE.TRAIT), ]
intron_gene
gwas_select[grepl("Alzheimer's disease", gwas_select$DISEASE.TRAIT), ]
x
sort(table(gwas_select$DISEASE.TRAIT), decreasing = T)[1:10]
gwas_select[grepl("cholesterol", gwas_select$DISEASE.TRAIT), ]
sort(table(gwas_select$DISEASE.TRAIT), decreasing = T)[1:10]
gwas_select[grepl("Triglycerides", gwas_select$DISEASE.TRAIT), c("DISEASE.TRAIT", "MAPPED.GENE")]
gwas_select[grepl("Triglycerides", gwas_select$DISEASE.TRAIT), c("DISEASE.TRAIT", "MAPPED_GENE")]
gwas_select[grepl("Adiponectin levels", gwas_select$DISEASE.TRAIT), c("DISEASE.TRAIT", "MAPPED.GENE")]
gwas_select[grepl("Adiponectin levels", gwas_select$DISEASE.TRAIT), c("DISEASE.TRAIT", "MAPPED_GENE")]
sort(table(gwas_select$DISEASE.TRAIT), decreasing = T)[1:10]
gwas_select[grepl("Alzheimer's disease", gwas_select$DISEASE.TRAIT), c("DISEASE.TRAIT", "MAPPED_GENE")]
gwas_select[grepl("IgG glycosylation", gwas_select$DISEASE.TRAIT), c("DISEASE.TRAIT", "MAPPED_GENE")]
gwas_select[grepl("Type 2 diabetes", gwas_select$DISEASE.TRAIT), c("DISEASE.TRAIT", "MAPPED_GENE")]
table(gwas_select$CONTEXT)
cons
sort(cons)
head(gwas)
gwasTable
gwasTable[which.min(gwasTable$P), ]
gwas = gwas4
vep_p <- filter(vep, UID %in% gwas$UID)
vep_p[vep_p$Consequence == "missense_variant", ]
group <- list(); group[[1]] <- gwas[1, ]; group_idx <- 1
for (i in 2:nrow(gwas)) {
chromosome = gwas$CHR[i] == gwas$CHR[i-1]
position = gwas$POS[i] - gwas$POS[i-1] < 1e6
other = abs(gwas$mean[i] - gwas$mean[i-1]) < 1
if ( all(chromosome, position, other) )
group[[group_idx]] = rbind(group[[group_idx]], gwas[i, ])
else {
group_idx = group_idx + 1
group[[group_idx]] = gwas[i, ]
}
}
group <- do.call(rbind, lapply(group, function(x) cbind(PEAK = x$UID[which.min(x$P)], x)))
gwasTable <- cbind(vep_p, group[match(vep_p$UID, group$UID), ])
gwasTable <- gwasTable[-1]
missense <- filter(gwasTable, grepl("missense_variant", Consequence))
missense
gwas_genes
"LRRC8E" %in% gwas_genes
"NANOS1" %in% gwas_genes
"ZNF684" %in% gwas_genes
"GKN1" %in% gwas_genes
gwas_select[grepl("cholesterol", gwas_select$DISEASE.TRAIT), ]
sort(table(gwas_select$DISEASE.TRAIT), decreasing = T)[1:10]
library(dplyr)
library(xlsx)
library(biomaRt)
library(Biobase)
library(genefilter)
library(VennDiagram)
library(qvalue)
rm(list = ls())
setwd("~/Dropbox/GitHub/Lupus")
source("~/Dropbox/GitHub/X/function.R")
options(stringsAsFactors = F)
name <- list.files(path = "./emase/", pattern = "BXSB_.*.tpm")
name
rna.emase <- lapply(name, function(x) {
cat(x, "\n"); filepath = file.path("./emase/", x); read.delim(filepath)
}); names(rna.emase) <- gsub("_GES.*", "", name)
head(rna.emase[[1]])
rna.emase.B6 <- sapply(rna.emase, function(x) x$B) %>% as.data.frame
rna.emase.SB <- sapply(rna.emase, function(x) x$S) %>% as.data.frame
rownames(rna.emase.B6) <- rownames(rna.emase.SB) <- rna.emase[[1]]$locus
data = cbind(rna.emase.B6, rna.emase.SB)
head(data)
colSums(data)
data = data[rowMax(as.matrix(data)) > 10, ]
head(data)
mart = useMart("ensembl", dataset = "mmusculus_gene_ensembl")
biomart <- getBM(c("ensembl_gene_id", "external_gene_name"), "ensembl_gene_id", rownames(data), mart)
head(biomart)
retrive <- c("ensembl_transcript_id", "ensembl_gene_id", "external_gene_name")
biomart <- getBM(retrive, filters = "ensembl_transcript_id", values = rownames(data), mart)
head(biomart)
all(biomart$ensembl_transcript_id %in% rownames(data))
data <- data[biomart$ensembl_transcript_id, ]
head(data)
data_gene <- apply(data, 2, function(x) tapply(x, biomart$external_gene_name, sum))
head(data_gene)
nrow(data_gene)
yaa = factor(rep(c(rep("yaa0", 3), rep("yaa1", 4)), 2), levels = c("yaa0", "yaa1"))
str = factor(c(rep("B6", 7), rep("SB", 7)), levels = c("B6", "SB"))
myplot = function(data, geneId) {
x = data.frame(value = as.matrix(data)[geneId, ], yaa = yaa, str = str)
ggplot(x, aes(x = yaa, y = value, fill = str)) +
geom_boxplot() + theme_bw() + xlab("") + ggtitle(geneId) +
scale_fill_manual(values = c("white", "firebrick1"))
}
myplot(data_gene, "Tlr7") # B6 genes with Yaa effects
library(ggplot2)
myplot(data_gene, "Tlr7") # B6 genes with Yaa effects
myplot(data_gene, "Tlr2") # SB genes with Yaa effects
myplot(data_gene, "Tlr9") # SB genes without Yaa effects
colMax(data_gene)
apply(data_gene, 2, max)
apply(data_gene, 2, sum)
outlier <- data_gene[rowMax(data_gene) > 5e3, ]
(outlier <- data_gene[rowMax(data_gene) > 5e3, ])
myplot(data_gene, "Eef1a1")
lapply(rownames(outlier), function(x) myplot(data_gene, x))
pdf("./pdf/outlier.pdf", width = 3, height = 4)
(outlier <- data_gene[rowMax(data_gene) > 5e3, ])
dev.off()
pdf("./pdf/outlier.pdf", width = 3, height = 4)
lapply(rownames(outlier), function(x) myplot(data_gene, x))
dev.off()
b6 = rowMeans(data[str == "B6"])
sb = rowMeans(data[str == "SB"])
plot(b6 + sb, b6 - sb, xlim = c(0, 1e4))
abline(0, 1, col = "red"); abline(0, -1, col = "red")
plot(b6 + sb, b6 - sb, xlim = c(0, 1e3), ylim = c(-1e3, 1e3))
abline(0, 1, col = "red"); abline(0, -1, col = "red")
pdf("./pdf/gene.pdf", width = 6, height = 4)
par(mfrow = c(1, 2))
plot(b6 + sb, b6 - sb, xlim = c(0, 1e4))
abline(0, 1, col = "red"); abline(0, -1, col = "red")
plot(b6 + sb, b6 - sb, xlim = c(0, 1e3), ylim = c(-1e3, 1e3))
abline(0, 1, col = "red"); abline(0, -1, col = "red")
dev.off()
data = data_gene
b6 = rowMeans(data[str == "B6"])
sb = rowMeans(data[str == "SB"])
head(data)
data = as.data.frame(data_gene)
b6 = rowMeans(data[str == "B6"])
sb = rowMeans(data[str == "SB"])
plot(b6 + sb, b6 - sb, xlim = c(0, 1e4))
plot(b6 + sb, b6 - sb, xlim = c(0, 1e3), ylim = c(-1e3, 1e3))
pdf("./pdf/gene.pdf", width = 6, height = 4)
par(mfrow = c(1, 2))
plot(b6 + sb, b6 - sb, xlim = c(0, 1e4))
abline(0, 1, col = "red"); abline(0, -1, col = "red")
plot(b6 + sb, b6 - sb, xlim = c(0, 1e3), ylim = c(-1e3, 1e3))
abline(0, 1, col = "red"); abline(0, -1, col = "red")
dev.off()
data2 = data / rowMeans(data) / 2
ttest = rowttests(as.matrix(data2), str)
ttest$q.value = p.adjust(ttest$p.value, method = "fdr")
gene.sb = rownames(ttest)[ttest$q.value < 0.05 & (ttest$dm < -0.9)]
gene.b6 = rownames(ttest)[ttest$q.value < 0.05 & (ttest$dm > 0.9)]
vennList <- list(SB = gene.sb, B6 = gene.b6)
data3 = data[1:7] + data[8:14]
ttest = rowttests(as.matrix(log2(data3 + 1)), yaa[1:7])
ttest$q.value = p.adjust(ttest$p.value, method = "fdr")
gene.yaa = rownames(ttest)[ttest$q.value < 0.05 & (abs(ttest$dm) > 0.1)]
vennList <- list(SB = gene.sb, B6 = gene.b6, YAA = gene.yaa)
venn.diagram(vennList, imagetype = "png", file = "./pdf/venn.png", cat.pos = 0, width = 2000, height = 2000)
library(dplyr)
library(xlsx)
library(biomaRt)
library(Biobase)
library(genefilter)
library(VennDiagram)
library(qvalue)
rm(list = ls())
setwd("~/Dropbox/GitHub/Lupus")
source("~/Dropbox/GitHub/X/function.R")
options(stringsAsFactors = F)
name <- list.files(path = "./emase/", pattern = "BXSB_.*.tpm")
rna.emase <- lapply(name, function(x) {
cat(x, "\n"); filepath = file.path("./emase/", x); read.delim(filepath)
}); names(rna.emase) <- gsub("_GES.*", "", name)
rna.emase.B6 <- sapply(rna.emase, function(x) x$B) %>% as.data.frame
rna.emase.SB <- sapply(rna.emase, function(x) x$S) %>% as.data.frame
rownames(rna.emase.B6) <- rownames(rna.emase.SB) <- rna.emase[[1]]$locus
data = cbind(rna.emase.B6, rna.emase.SB)
data = data[rowMax(as.matrix(data)) > 10, ]
mart = useMart("ensembl", dataset = "mmusculus_gene_ensembl")
retrive <- c("ensembl_transcript_id", "ensembl_gene_id", "external_gene_name")
biomart <- getBM(retrive, filters = "ensembl_transcript_id", values = rownames(data), mart)
data <- data[biomart$ensembl_transcript_id, ]
data_gene <- apply(data, 2, function(x) tapply(x, biomart$external_gene_name, sum))
yaa = factor(rep(c(rep("yaa0", 3), rep("yaa1", 4)), 2), levels = c("yaa0", "yaa1"))
str = factor(c(rep("B6", 7), rep("SB", 7)), levels = c("B6", "SB"))
myplot = function(data, geneId) {
x = data.frame(value = as.matrix(data)[geneId, ], yaa = yaa, str = str)
ggplot(x, aes(x = yaa, y = value, fill = str)) +
geom_boxplot() + theme_bw() + xlab("") + ggtitle(geneId) +
scale_fill_manual(values = c("white", "firebrick1"))
}
pdf("./pdf/example.pdf", width = 3, height = 4)
myplot(data_gene, "Tlr7") # B6 genes with Yaa effects
myplot(data_gene, "Tlr2") # SB genes with Yaa effects
myplot(data_gene, "Tlr9") # SB genes without Yaa effects
dev.off()
(outlier <- data_gene[rowMax(data_gene) > 5e3, ])
str
all = paste0(str, yaa)
all
names(outlier)
colnames(outlier)
sapply(unique(all), function(x) rowMeans(outlier[, all == x]) )
pdf("./pdf/outlier.pdf", width = 3, height = 4)
lapply(rownames(outlier), function(x) myplot(data_gene, x))
dev.off()
data = as.data.frame(data_gene)
b6 = rowMeans(data[str == "B6"])
sb = rowMeans(data[str == "SB"])
pdf("./pdf/gene.pdf", width = 6, height = 4)
par(mfrow = c(1, 2))
plot(b6 + sb, b6 - sb, xlim = c(0, 1e4))
abline(0, 1, col = "red"); abline(0, -1, col = "red")
plot(b6 + sb, b6 - sb, xlim = c(0, 1e3), ylim = c(-1e3, 1e3))
abline(0, 1, col = "red"); abline(0, -1, col = "red")
dev.off()
data2 = data / rowMeans(data) / 2
ttest = rowttests(as.matrix(data2), str)
ttest$q.value = p.adjust(ttest$p.value, method = "fdr")
head(ttest)
tail(ttest)
gene.sb = rownames(ttest)[ttest$q.value < 0.05 & (ttest$dm < -0.9)]
gene.b6 = rownames(ttest)[ttest$q.value < 0.05 & (ttest$dm > 0.9)]
vennList <- list(SB = gene.sb, B6 = gene.b6)
venn.diagram(vennList, imagetype = "png", file = "./pdf/venn.png", width = 2000, height = 2000)
data3 = data[1:7] + data[8:14]
ttest = rowttests(as.matrix(log2(data3 + 1)), yaa[1:7])
ttest$q.value = p.adjust(ttest$p.value, method = "fdr")
gene.yaa = rownames(ttest)[ttest$q.value < 0.05 & (abs(ttest$dm) > 0.1)]
vennList <- list(SB = gene.sb, B6 = gene.b6, YAA = gene.yaa)
venn.diagram(vennList, imagetype = "png", file = "./pdf/venn.png", cat.pos = 0, width = 2000, height = 2000)
myGk = mmGK(intersect(gene.sb, gene.yaa))
data.frame(KEGG = myGk$KEGG$Term[1:20], BP = myGk$GO$BP$Term[1:20], MF = myGk$GO$BP$Term[1:20])
write(intersect(gene.sb, gene.yaa), file = "./iregulon/gene1.txt")
options(stringsAsFactors = F)
file <- "./iregulon/gene1.tsv"
univ <- read.table("./iregulon/universe.txt")$V1
ireg <- read.delim(file, comment.char = ";")
factor <- lapply(1:nrow(ireg), function(x) unlist(strsplit(ireg$Transcription.factor[x], split = ",")))
target <- lapply(1:nrow(ireg), function(x) unlist(strsplit(ireg$Target.genes[x], split = ",")))
factor <- lapply(factor, function(x) x[x %in% univ])
idx <- sapply(factor, length) > 0
factor <- factor[idx]; target <- target[idx]
edges <- lapply(1:length(factor), function(x) expand.grid(factor[[x]], target[[x]], stringsAsFactors = F))
edges <- do.call(rbind, edges)
edges <- edges[! duplicated(edges), ]
# VISUALIZATION: IGRAPH
igraph.dt <- graph.data.frame(edges)
igraph.dt$layout <- layout.sphere
igraph.dt$layout <- layout.circle
library(igraph)
igraph.dt <- graph.data.frame(edges)
igraph.dt$layout <- layout.sphere
V(igraph.dt)$color = rep("chartreuse3", length(V(igraph.dt)$name))
V(igraph.dt)$color[V(igraph.dt)$name %in% unlist(factor)] <- "gold"
V(igraph.dt)$size = (degree(igraph.dt) - 1) / (max(degree(igraph.dt)) - 1) * 10 + 2
V(igraph.dt)$label.cex = (degree(igraph.dt) - 1) / (max(degree(igraph.dt)) - 1) * 2 + 0.5
V(igraph.dt)$label.color = rep("dodgerblue3", length(V(igraph.dt)$name))
V(igraph.dt)$label.color[V(igraph.dt)$color == "gold"] = "firebrick1"
pdf("./iregulon/gene1.pdf", width = 9, height = 9)
plot.igraph(igraph.dt, vertex.frame.color = "white", edge.arrow.size = 0.3)
dev.off()
head(data)
rownames(data)[grep("mt-", rownames(data)]
rownames(data)[grep("mt-", rownames(data))]
myplot(data, "mt-Rnr1")
myplot(data, "mt-Rnr2")
myplot(data, "Actb")
myplot(data, "Gapdh")
myplot(data, "App")
myplot(data, "Psen")
myplot(data, "Prnp")
myplot(data, "Bcl6")
myplot(data, "Il21")
myplot(data, "Il21")
head(data)
myplot(data, "Il7")
myplot(data, "Il10")
nrow(data_gene)
"Il21" %in% rownames(data_gene)
myplot(data_gene, "Tlr7") # B6 genes with Yaa effects
myplot(data_gene, "Cxcr5")
setwd("~/Dropbox/GitHub/Lupus/BXSB(rnaseq)")
load("gene_expression_tpm.rdt"); tpm = gene_expression_tpm # aligned to BXSB
rm(gene_expression_tpm)
mart <- useMart("ensembl", dataset = "mmusculus_gene_ensembl")
mart1 = getBM(c("ensembl_gene_id", "external_gene_name"), "ensembl_gene_id", select, mart)
load("gene_expression_tpm_b6.rdt"); tpm_b6 = gene_expression_tpm # aligned to B6
rm(gene_expression_tpm)
select = intersect(rownames(tpm), rownames(tpm_b6))
mart1 = getBM(c("ensembl_gene_id", "external_gene_name"), "ensembl_gene_id", select, mart)
select = select[select %in% mart1$ensembl_gene_id]
tpm = tpm[select, ]
tpm_b6 = tpm_b6[select, ]
rownames(tpm) = rownames(tpm_b6) = mart1$external_gene_name
head(tpm)
tpm["Il21", ]
tpm_b6["Il21", ]
data = cbind(rna.emase.B6, rna.emase.SB)
head(data)
data["ENSMUST00000029273", ]
data["ENSMUST00000161015", ]
data["ENSMUST00000196943", ]
myplot(data, "ENSMUST00000029273")
myplot(data_gene, "Tlr9")
rownames(data)[grep("mt-", rownames(data))]
rownames(data_gene)[grep("mt-", rownames(data))]
rownames(data_gene)[grep("mt-", rownames(data_gene))]
myplot(data_gene, "mt-Ts1")
myplot(data_gene, "mt-Tw")
outliers
outlier
myplot(data_gene, "Igkc")
myplot(data_gene, "Ighg2c")
myplot(data_gene, "Igj")
myplot(data_gene, "Igkc")
myplot(data_gene, "Tcl7")
myplot(data_gene, "Tcr7")
myplot(data_gene, "Tcr1")
myplot(data_gene, "Tcr2")
myplot(data_gene, "Tcrb")
myplot(data_gene, "Tcra")
myplot(data_gene, "Tcrc")
grep("Tcr", rownames(data_gene))
x = rownames(data_gene)
x[6170]
x[6171]
grep("Trb", rownames(data_gene))
x[grep("Trb", rownames(data_gene))]
x[grep("Tra", rownames(data_gene))]
setwd("~/Dropbox/GitHub/Il21")
load("./data/myTpm.rdt")
head(myTpm)
x = rownames(myTpm)
grep("mt-", x)
x[grep("mt-", x)]
head(myTpm)
cov(1, 2)
library(ape)
library(amap)
library(dplyr)
library(stargazer)
rm(list = ls())
setwd("~/Dropbox/GitHub/pmca")
load("./dataForPMCA_chosenGenes.RData")
(gene = colnames(X))
X = X[, gene != "Prnp"]
Y = Y[, gene != "Prnp"]
(cell = rownames(Y)) # single cell RNA-seq
(sample = rownames(X)) # time serial AD bulk RNA-seq
geno = gsub(".*(WT|APP).*", "\\1", sample)
month = gsub(".*(2m|4m|5m|6m).*", "\\1", sample)
group = c("WT2m", "WT4m", "WT5m", "WT6m", "APP2m", "APP4m", "APP5m", "APP6m")
group = factor(paste0(geno, month), levels = group)
wt2m = colMeans(X[group == "WT2m", ])
X = sweep(X, 2, wt2m, "-") # WT:2m reference
X = t(sapply(levels(group), function(x) colMeans(X[group == x, ])))
X = t(sapply(levels(group), function(x) { # median / mad: not stable??
apply(X[group == x, ], 2, function(xx) median(xx) / (1.4826 * mad(xx)))
}))
X = sweep(X, 2, X[1, ], "-")[-1, ] # WT:2m reference
major = gsub("[0-9]+$", "", cell)
Xp = X - rowMeans(X)
Yp = Y - rowMeans(Y)
C = Xp %*% t(Yp) / ncol(X) # R's
xx = sample(ncol(X))
C2 = Xp[, xx] %*% t(Yp[, xx]) / ncol(X) # R's
C[1:5, 1:5]; C2[1:5, 1:5]
svd.c = svd(C)
u = svd.c$u # left singular vector
v = svd.c$v # right signular vector
d = svd.c$d # cross-covariance
A = t(Xp) %*% u # projections of X onto u
B = t(Yp) %*% v # projections of Y onto v
Zx = X %*% A
Zx <- t(scale(t(Zx), scale = T, center = F))
Zy = Y %*% A # Robyn
Zy <- t(scale(t(Zy), scale = T, center = F))
Zx
Zy
dim(Zy)
Zx
dim(X)
w <- apply(Zx, 2, sd) # get starting window vector
w
scores.ran <- permutation.proc(X, Y, method = method, B = B) # get scores for permutations
source("pmca.R")
source("get.mca.R")
source("get.inter.R")
source("get.scores.R")
source("match.patterns.R")
source("iterative.proc.R")
source("permutation.proc.R")
by = 2; method = "each"; B = 1000; alpha = .05; plot = TRUE;
scores.pos <- get.scores(Zx, Zy) # distance
set.seed(B)
scores.ran <- permutation.proc(X, Y, method = method, B = B) # get scores for permutations
B
p
scores = scores.pos
w
B <- dim(scores)[4]; p <- dim(scores)[3]; J <- dim(scores)[2]; q <- dim(scores)[1]
B
scores = scores.ran
B <- dim(scores)[4]; p <- dim(scores)[3]; J <- dim(scores)[2]; q <- dim(scores)[1]
B
p
J
q
w <- w[1:J]
w
fpr <- array(dim=c(J,B))
fpr
fpr[1:5, 1:5]
J
B
done <- FALSE
dim(scores)
scores[1:5, 6, 1, 1]
scores[1:5, , 1, 1]
g <- match.patterns(scores[,,1,b],w=wopt)
tau = 0.3
tau = 0.5
wopt <- w/tau
g <- match.patterns(scores[,,1,b],w=wopt)
b = 1
g <- match.patterns(scores[,,1,b],w=wopt)
g
fpr[,b] <- unlist(lapply(g,length))/q
fpr
fpr[, 1]
q
dim(Zx)
library(dplyr)
library(xlsx)
library(biomaRt)
library(Biobase)
library(genefilter)
library(VennDiagram)
library(qvalue)
rm(list = ls())
setwd("~/Dropbox/GitHub/Lupus")
source("~/Dropbox/GitHub/X/function.R")
options(stringsAsFactors = F)
# Rna-seq on bxsb and bxsb/b6y
name <- list.files(path = "./emase/", pattern = "BXSB_.*.tpm")
rna.emase <- lapply(name, function(x) {
cat(x, "\n"); filepath = file.path("./emase/", x); read.delim(filepath)
}); names(rna.emase) <- gsub("_GES.*", "", name)
rna.emase.B6 <- sapply(rna.emase, function(x) x$B) %>% as.data.frame
rna.emase.SB <- sapply(rna.emase, function(x) x$S) %>% as.data.frame
rownames(rna.emase.B6) <- rownames(rna.emase.SB) <- rna.emase[[1]]$locus
data = cbind(rna.emase.B6, rna.emase.SB)
data = data[rowMax(as.matrix(data)) > 10, ]
mart = useMart("ensembl", dataset = "mmusculus_gene_ensembl")
retrive <- c("ensembl_transcript_id", "ensembl_gene_id", "external_gene_name")
biomart <- getBM(retrive, filters = "ensembl_transcript_id", values = rownames(data), mart)
data <- data[biomart$ensembl_transcript_id, ]
data_gene <- apply(data, 2, function(x) tapply(x, biomart$external_gene_name, sum))
yaa = factor(rep(c(rep("yaa0", 3), rep("yaa1", 4)), 2), levels = c("yaa0", "yaa1"))
str = factor(c(rep("B6", 7), rep("SB", 7)), levels = c("B6", "SB"))
all = paste0(str, yaa)
myplot = function(data, geneId) {
x = data.frame(value = as.matrix(data)[geneId, ], yaa = yaa, str = str)
ggplot(x, aes(x = yaa, y = value, fill = str)) +
geom_boxplot() + theme_bw() + xlab("") + ggtitle(geneId) +
scale_fill_manual(values = c("white", "firebrick1"))
}
(outlier <- data_gene[rowMax(data_gene) > 5e3, ])
sapply(unique(all), function(x) rowMeans(outlier[, all == x]) )
data = as.data.frame(data_gene)
b6 = rowMeans(data[str == "B6"])
sb = rowMeans(data[str == "SB"])
head(data_gene)
data2 = data / rowMeans(data) / 2
ttest = rowttests(as.matrix(data2), str)
ttest$q.value = p.adjust(ttest$p.value, method = "fdr")
head(ttest)
gene.sb = rownames(ttest)[ttest$q.value < 0.05 & (ttest$dm < -0.9)]
gene.b6 = rownames(ttest)[ttest$q.value < 0.05 & (ttest$dm > 0.9)]
data3 = data[1:7] + data[8:14]
ttest = rowttests(as.matrix(log2(data3 + 1)), yaa[1:7])
ttest$q.value = p.adjust(ttest$p.value, method = "fdr")
gene.yaa = rownames(ttest)[ttest$q.value < 0.05 & (abs(ttest$dm) > 0.1)]
head(data_gene)
getwd()
write.xlsx(data_gene, file = "./output.xlsx", sheetName = "TPM", append = T)
write.xlsx(gene.b6, file = "./output.xlsx", sheetName = "b6", append = T)
write.xlsx(gene.sb, file = "./output.xlsx", sheetName = "sb", append = T)
write.xlsx(gene.yaa, file = "./output.xlsx", sheetName = "yaa", append = T)
head(data_gene)
all
yy = sapply(unique(all), function(x) rowMeans(data_gene[, all == x]) )
head(yy)
write.xlsx(yy, file = "./output.xlsx", sheetName = "TPM_mean", append = T)
